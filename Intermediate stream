package com.inm.sbi.lotus.cloudant.fundtransfer.Streams;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.function.Supplier;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

import org.apache.xml.utils.IntVector;

import com.ibm.ws.webservices.xml.wassysapp.systemApp;

public class StreamIntermediateOPerations {

	public static void main(String[] args) {
		
		//1. filter.... gate
		/*
		 * filter takes predicate as an argument
		 * predicate-> it is a functional interface
		 */
		System.out.println("\n Filter with predicate with lambda expression");
		
		List<Integer> li = Arrays.asList(2,3,54,5,6,7,9);
		li.stream().filter(n -> n%2 == 0).forEach(System.out::println);
		
		
		
		//2. map.....transformer(a -> A)
		/*
		 * take one data and convert in another format
		 * map uses function as a input to perform its operation
		 * Function is another functional interface introduce in java 8
		 */
		
		System.out.println("\nMap Convert lis to uppercase");
		
		List<String> ls = Arrays.asList("Hey", "nisha", "Pandey");
		ls.stream().map(name -> name.toUpperCase()).forEach(System.out::println);
		//using method reference
		ls.stream().map(String ::toUpperCase).forEach(System.out::println);
		
		
		
		
		//reduce.....used to reduce collection to one element
		/*
		 * It is a terminal operation of stream coz it returns some result
		 * The output of reduce will be a single element
		 * 1st input to reduce is identity from what element it is going to start performing operation
		 * 2nd input is what operation we are going to perform
		 */
		System.out.println("\nReduce Find the sum of element");
		
		List<Integer> lir = Arrays.asList(1,4,6,7,8,6,5,7,0);
		final int sum = lir.stream().reduce(0, (a,b) -> a+b);
		System.out.println(sum);
		
		
		
		//3. flatmap.....used when we have complex data structure or list(list within list)
		/*
		 * when we have complex data structure then we use flatmap for flatening those data 
		 * and then we use map to perform operation on each element
		 */
 
		System.out.println("\nflatmap for complex data structure");
		
		List<List<String>> listOfLists = Arrays.asList(
											Arrays.asList("a","d"),
											Arrays.asList("r","t"),
											Arrays.asList("y","J"));
		//listOfLists.stream().flatMap(list -> Stream).map(String::toUpperCase).forEach(System.out::println);
		//using method reference
		listOfLists.stream().flatMap(Collection::stream).map(String::toUpperCase).forEach(System.out::println);

		
		
		
		
		
		
		//4. peak.......
		/*
		 * perform few operation on stream but do not modify the stream
		 * or peek is basically is used to print the element
		 */
		
		System.out.println("\nPeek the element");
		
		List<Integer> lipeek = Arrays.asList(5,4,3,5,6,3,7);	
		lipeek.stream().map(n -> n * n).peek(System.out::println).collect(Collectors.toList());
		
		
		
		
		//5. distinct.... filter the duplicate elements and print the unique elements
		System.out.println("\ndistinct means print unique elements ");
		
		List<Integer> lisd = Arrays.asList(2,2,2,4,4,4,4,6,6,6,8);		
		lisd.stream().distinct().forEach(System.out::println);
		
		
		
		
		
		
		//6. sorted.....by default it sort element in ascending order(natural order)
		
		System.out.println("\nsort element in descending order ");
		
		List<Integer> lisort = Arrays.asList(2,5,3,9,6,3,5,2);
		lisort.stream().sorted().forEach(System.out::println);//ascending order(natural order) by default
		System.out.println("\n");
		lisort.stream().sorted(Comparator.reverseOrder()).forEach(System.out::println);//descending order by using comparator
		
		System.out.println("sort string based on its size");
		
		List<String> listring = Arrays.asList("Natasha","Neha","Hi");
		
		listring.stream().sorted(Comparator.comparingInt(String::length)).toList().forEach(System.out::println);//ascending order bydefault
		listring.stream().sorted(Comparator.comparingInt(String::length).reversed()).toList().forEach(System.out::println);//descending order
		
		
		
		
		
		
		//7. skip.....used to skip the n elements
		System.out.println("\nskip first 2 elements in an array");
		
		List<Integer> lielm = Arrays.asList(2,5,7,5,1,6);
		lielm.stream().skip(2).collect(Collectors.toList()).forEach(System.out::println);
		lielm.stream().skip(4).forEach(System.out::println);
		
		
		
		
		
		//8. limit....opposit to skip
		System.out.println("\nlimit the element ... means print only first n elements and block other elements");
		
		List<Integer> lilimit = Arrays.asList(3,6,4,5,2,1,3,6);
		lilimit.stream().limit(4).forEach(System.out::println);
		
		
		///test...
		// q1. top 3 largest number
		System.out.println("biggest 3 distinct elements");
		List<Integer> li2 = Arrays.asList(10,5,20,8,25,15);
		li2.stream().distinct().sorted(Comparator.reverseOrder()).limit(3).forEach(System.out::println);
		
		
		//q2.  top palindrom words find
		System.out.println("palindrome word filter from list of strings \n");
		List<String> ls2 = Arrays.asList("madam", "java","code","noon");
		ls2.stream().filter(n -> new StringBuilder(n).reverse().toString().equals(n)).forEach(System.out::println);
		
		//q3. integer squre and unique square print
		System.out.println("do square then print unique squares \n");
		List<Integer> listr = Arrays.asList(2,3,4,2,3);
		listr.stream().map(n -> n*n).distinct().collect(Collectors.toList()).forEach(System.out::println);
		
		//q4. group list on the basis of length
		System.out.println("group list on the basis of length ");
		List<String> listre = Arrays.asList("java","js","python","go","c","cpp");
		Map<Integer, List<String>> mapp = listre.stream().collect(Collectors.groupingBy(String::length));
		System.out.println(" list on the basis of length  \n "+mapp);
		
		//q5. divisible number of 3 .. take average number
		System.out.println("divisible number of 3 .. take average number ");
		List<Integer> lit = Arrays.asList(3,5,9,12,7,18);
		double avgg = lit.stream().filter(i -> i%3 == 0).mapToInt(Integer::intValue).average().orElse(0);
		System.out.println("Divisibel and avg : \n "+avgg);
		
		
		//q1. check if any number is even
		
		  System.out.println("check if any number is even "); int a[] = {3,5,7,8,11};
		  
		  boolean streamm = Arrays.stream(a).anyMatch(n -> n%2 == 0);
		  System.out.println("\n"+streamm);
		 
		
		
		//q1. check if any number is even
				System.out.println("check if any number is even \n");
				List<Integer> liev = Arrays.asList(3,5,7,8,11);
				liev.stream().filter(n -> n%2 == 0 ).forEach(System.out::println);
				
				
		//q2. check if all string starts with J
				System.out.println("check if if all string starts with J ");
				List<String> lis = Arrays.asList("Java","JavaScript","JSP");
				lis.stream().filter(n -> n.startsWith("J")).forEach(System.out::println);
				Boolean bl = lis.stream().allMatch(n -> n.startsWith("J"));
				System.out.println("\n"+bl);
				
				
		
				
	//q3. check if all string starts with J
				System.out.println("check if no word is empty ");
		List<String> liss = Arrays.asList("hello","world","");
		boolean lb = liss.stream().noneMatch(n -> n.isEmpty());
		System.out.println("\n"+lb);
		
		
		
		
		
		//q1. find secod highest number
		System.out.println("find second highest number ");
		List<Integer> lihs = Arrays.asList(10,30,20,50,40,50);
		Optional<Integer> ab = lihs.stream().distinct().sorted(Comparator.reverseOrder()).skip(1).findFirst();
		System.out.println(ab);
		
		
		
		//q2. find the longest string
		System.out.print("find the longest string ");
		List<String> lar = Arrays.asList("Java","Programming","Stream","API");
		String varr = lar.stream().max(Comparator.comparingInt(String::length)).orElse("no value");
		System.out.println(varr);
		
		//q3. count how many words contain a
		System.out.print("count how many words contain a ");
		List<String> lisw = Arrays.asList("apple","banana","kiwi","mango");
		lisw.stream().filter(n -> n.toLowerCase().contains("a")).count();
		long ct = lisw.stream().filter(n -> n.contains("a")).count();
		System.out.println(ct);
		
		
		//q4 group even and odd numbers separately
		List<Integer> lig = Arrays.asList(1,2,3,4,5,6);
		lig.stream().collect(Collectors.groupingBy(n -> n%2 == 0 ? "Even" : "ODD")).forEach((group, num) -> System.out.println(group+" numbers "+num));
		Map<String, List<Integer>> ll = lig.stream().collect(Collectors.groupingBy(n -> n%2 == 0 ? "Even" : "ODD"));
		System.out.println(ll);
		
		
		//q5 convert list of string into a single string separated by commas
		List<String> lisc = Arrays.asList("A","B","C");
		String l1 = lisc.stream().collect(Collectors.joining(","));
		System.out.println("Comma separated values "+l1);
		lisc.stream().reduce((a,b) -> a+ "," +b).orElse("Hi");  
		
		
		
		/*
		 * fvlfbl;g df
		 * print only integers
		 */
		System.out.println("Printing only int ");
		
		List<Object> liint = Arrays.asList(3,2,5,'s',34,"f",3.5);
		liint.stream().filter(n -> n instanceof Integer).forEach(System.out::println);
		//using core java
		List<Integer> lint = new ArrayList<>();
		for(Object ob :liint) {
			if(ob instanceof Integer)
				lint.add((Integer) ob);
		}
		for(Integer num : lint) {
			System.out.println(num);
		}
	}
}
